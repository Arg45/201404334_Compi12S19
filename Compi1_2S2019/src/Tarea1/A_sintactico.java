
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 04 19:21:49 CST 2019
//----------------------------------------------------

package Tarea1;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 04 19:21:49 CST 2019
  */
public class A_sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\004\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\004\045\004\001\002\000\006\002\ufffe\006" +
    "\ufffe\001\002\000\006\002\000\006\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\045" +
    "\011\001\002\000\006\002\uffff\006\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<Tabla_error> TablaEs = new LinkedList<Tabla_error>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;

    System.out.println("!!!! Error Sintactico Recuperado !!!!");
    System.out.println("\t\tLexema: " + lexema);
    System.out.println("\t\tFila: " + fila);
    System.out.println("\t\tColumna: " + columna);

    Tabla_error datos = new Tabla_error(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
    TablaEs.add(datos);
    }


    //Metodo al que se llama cuando no se puede recuperar un error sintactico
    public void unrecovered_syntax_error(Symbol s)
    {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;

    System.out.println("!!!! Error Sintactico, Panic mode !!!!");
    System.out.println("\t\tLexema: " + lexema);
    System.out.println("\t\tFila: " + fila);
    System.out.println("\t\tColumna: " + columna);

    Tabla_error datos = new Tabla_error(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
    TablaEs.add(datos);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A_sintactico$actions {





  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= ID 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= E COMA ID 
            {
              String RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= E 
            {
              String RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

